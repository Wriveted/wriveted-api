"""Drop event descriptions column

Revision ID: a6743b88da5b
Revises: a9a0c79362f9
Create Date: 2022-03-31 13:01:25.004641

"""

import sqlalchemy as sa
from sqlalchemy import orm, select
from sqlalchemy.ext.automap import automap_base

# revision identifiers, used by Alembic.
from sqlalchemy.orm.attributes import flag_modified

from alembic import op

Base = automap_base()

revision = "a6743b88da5b"
down_revision = "a9a0c79362f9"
branch_labels = None
depends_on = None


# class Event(Base):
#     __tablename__ = 'events'
#
#     id = Column(UUID(as_uuid=True), default=uuid.uuid4, primary_key=True)
#     info = Column(MutableDict.as_mutable(JSON))
#     description = Column(String)
#


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()

    # Reflect the ORM models from the database at this point in time
    # Ref: https://stackoverflow.com/questions/13676744/using-the-sqlalchemy-orm-inside-an-alembic-migration-how-do-i/70985446#70985446
    Base.prepare(autoload_with=bind)

    Event = Base.classes.events  # events is our table name
    session = orm.Session(bind=bind)

    events = (
        session.execute(select(Event).where(Event.info["description"] is None))
        .scalars()
        .all()
    )
    for event in events:
        info = event.info if event.info is not None else {}
        info["description"] = event.description
        event.info = info
        # Probably don't need this part...
        flag_modified(event, "info")
        session.add(event)

    session.commit()

    op.drop_column("events", "description")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "events",
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    bind = op.get_bind()
    Base.prepare(autoload_with=bind)
    Event = Base.classes.events  # events is our table name
    session = orm.Session(bind=bind)
    events = session.execute(select(Event)).scalars().all()
    for event in events:
        event.description = event.info["description"]
    session.commit()
    op.alter_column("events", "description", nullable=False)
    # ### end Alembic commands ###
