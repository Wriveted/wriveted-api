"""add user groups

Revision ID: 1a4fef66641d
Revises: 2b2edef753de
Create Date: 2022-05-23 12:40:59.076337

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "1a4fef66641d"
down_revision = "2b2edef753de"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_groups",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("info", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("school_id", sa.Integer(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("service_account_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["school_id"], ["schools.id"], name="fk_booklist_school", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["service_account_id"],
            ["service_accounts.id"],
            name="fk_booklist_service_account",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_booklist_user", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    user_group_type = sa.Enum("CLASS", "CLUB", "OTHER", name="enum_user_group_type")
    user_group_type.create(op.get_bind(), checkfirst=True)
    op.add_column(
        "user_groups",
        sa.Column(
            "group_type",
            user_group_type,
            nullable=False,
            server_default="OTHER",
        ),
    )

    op.create_index(
        op.f("ix_user_groups_group_type"), "user_groups", ["group_type"], unique=False
    )
    op.create_index(op.f("ix_user_groups_id"), "user_groups", ["id"], unique=True)
    op.create_index(op.f("ix_user_groups_name"), "user_groups", ["name"], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_groups_name"), table_name="user_groups")
    op.drop_index(op.f("ix_user_groups_id"), table_name="user_groups")
    op.drop_index(op.f("ix_user_groups_group_type"), table_name="user_groups")
    op.drop_table("user_groups")
    user_group_type = sa.Enum(name="enum_user_group_type")
    user_group_type.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
