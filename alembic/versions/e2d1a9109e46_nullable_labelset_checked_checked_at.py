"""nullable labelset.checked, checked_at

Revision ID: e2d1a9109e46
Revises: 89d877a37997
Create Date: 2023-03-23 11:46:08.194321

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_grant_table import PGGrantTable
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision = "e2d1a9109e46"
down_revision = "89d877a37997"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("labelsets", sa.Column("checked_at", sa.DateTime(), nullable=True))
    op.alter_column("labelsets", "checked", existing_type=sa.BOOLEAN(), nullable=True)

    # add trigger function for checked_at
    op.execute(
        """
        CREATE OR REPLACE FUNCTION set_checked_at()
        RETURNS TRIGGER AS $$
        BEGIN
            IF NEW.checked = true THEN
                NEW.checked_at := NOW();
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """
    )

    # attach trigger to labelsets table
    op.execute(
        """
        CREATE TRIGGER labelsets_checked_at
        BEFORE INSERT OR UPDATE ON labelsets
        FOR EACH ROW
        EXECUTE FUNCTION set_checked_at();
        """
    )

    # update all existing rows to have checked=true.
    # if they haven't been flagged thus far, they're probably good.
    op.execute("UPDATE labelsets SET checked=true")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("labelsets", "checked", existing_type=sa.BOOLEAN(), nullable=False)
    op.drop_column("labelsets", "checked_at")
    op.execute(
        """
        DROP TRIGGER IF EXISTS labelsets_checked_at ON labelsets;
        """
    )
    op.execute(
        """
        DROP FUNCTION IF EXISTS set_checked_at();
        """
    )
    # ### end Alembic commands ###
