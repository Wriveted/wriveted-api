"""Recreate book list tables

Revision ID: d0009439d3ac
Revises: e4e85d69e56c
Create Date: 2022-04-18 13:39:07.219995

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "d0009439d3ac"
down_revision = "e4e85d69e56c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "book_lists",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "PERSONAL",
                "SCHOOL",
                "REGION",
                "HUEY",
                "OTHER_LIST",
                name="enum_book_list_type",
            ),
            nullable=False,
        ),
        sa.Column("info", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("school_id", sa.Integer(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("service_account_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["school_id"], ["schools.id"], name="fk_booklist_school"
        ),
        sa.ForeignKeyConstraint(
            ["service_account_id"],
            ["service_accounts.id"],
            name="fk_booklist_service_account",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="fk_booklist_user"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_book_lists_id"), "book_lists", ["id"], unique=True)
    op.create_index(op.f("ix_book_lists_name"), "book_lists", ["name"], unique=False)
    op.create_index(op.f("ix_book_lists_type"), "book_lists", ["type"], unique=False)
    op.create_table(
        "book_list_works",
        sa.Column("booklist_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("work_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("order_id", sa.Integer(), nullable=True),
        sa.Column("info", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["booklist_id"], ["book_lists.id"], name="fk_booklist_items_booklist_id"
        ),
        sa.ForeignKeyConstraint(
            ["work_id"], ["works.id"], name="fk_booklist_items_work_id"
        ),
        sa.PrimaryKeyConstraint("booklist_id", "work_id"),
    )
    op.create_index(
        "index_booklist_ordered",
        "book_list_works",
        ["booklist_id", "order_id"],
        unique=True,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("index_booklist_ordered", table_name="book_list_works")
    op.drop_table("book_list_works")
    op.drop_index(op.f("ix_book_lists_type"), table_name="book_lists")
    op.drop_index(op.f("ix_book_lists_name"), table_name="book_lists")
    op.drop_index(op.f("ix_book_lists_id"), table_name="book_lists")
    op.drop_table("book_lists")
    # ### end Alembic commands ###
