"""introduce standalone collections

Revision ID: 3534e992a7b6
Revises: bef0307ae2c2
Create Date: 2022-11-07 13:39:24.706390

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "3534e992a7b6"
down_revision = "bef0307ae2c2"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # create the new collections table
    op.create_table(
        "collections",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("school_id", sa.Integer(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("info", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    # add indexes
    op.create_index(op.f("ix_collections_id"), "collections", ["id"], unique=True)
    op.create_index(op.f("ix_collections_name"), "collections", ["name"], unique=False)

    # create a collection for each school
    op.execute(
        """
        INSERT INTO collections (school_id, name)
        (SELECT DISTINCT school_id, CONCAT('Books at ', schools.name)
        FROM collection_items join schools on collection_items.school_id = schools.id);
        """
    )

    # add link to collectionitems table
    op.add_column(
        "collection_items",
        sa.Column(
            "collection_id",
            postgresql.UUID(as_uuid=True),
            sa.ForeignKey("collections.id", ondelete="CASCADE"),
            nullable=True,
        ),
    )

    # bring over the collection data
    op.execute(
        """
        UPDATE collection_items
        SET collection_id = collections.id
        FROM collections
        WHERE collections.school_id = collection_items.school_id;
        """
    )

    # prepare the new columns and relationships
    op.add_column(
        "collection_items",
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
    )
    op.add_column(
        "collection_items",
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
    )
    op.drop_index("index_editions_per_collection", table_name="collection_items")
    op.create_index(
        "index_editions_per_collection",
        "collection_items",
        ["collection_id", "edition_isbn"],
        unique=True,
    )
    op.create_index(
        op.f("ix_collection_items_collection_id"),
        "collection_items",
        ["collection_id"],
        unique=False,
    )
    op.drop_constraint(
        "fk_collection_items_school_id", "collection_items", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_collection_items_collection_id",
        "collection_items",
        "collections",
        ["collection_id"],
        ["id"],
    )
    op.create_index(
        op.f("ix_collections_school_id"), "collections", ["school_id"], unique=False
    )
    op.create_index(
        op.f("ix_collections_user_id"), "collections", ["user_id"], unique=False
    )
    op.create_foreign_key(
        "fk_school_collection",
        "collections",
        "schools",
        ["school_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "fk_user_collection",
        "collections",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index("ix_collection_items_school_id", table_name="collection_items")
    op.drop_column("collection_items", "school_id")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("fk_user_collection", "collections", type_="foreignkey")
    op.drop_constraint("fk_school_collection", "collections", type_="foreignkey")
    op.drop_index(op.f("ix_collections_user_id"), table_name="collections")
    op.drop_index(op.f("ix_collections_school_id"), table_name="collections")
    op.add_column(
        "collection_items",
        sa.Column("school_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(
        "fk_collection_items_collection_id", "collection_items", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_collection_items_school_id",
        "collection_items",
        "schools",
        ["school_id"],
        ["id"],
    )
    op.drop_index(
        op.f("ix_collection_items_collection_id"), table_name="collection_items"
    )
    op.drop_index("index_editions_per_collection", table_name="collection_items")
    op.create_index(
        "index_editions_per_collection",
        "collection_items",
        ["school_id", "edition_isbn"],
        unique=False,
    )
    op.create_index(
        "ix_collection_items_school_id", "collection_items", ["school_id"], unique=False
    )

    op.execute(
        """
        UPDATE collection_items
        SET school_id = collections.school_id
        FROM collections
        WHERE collections.id = collection_items.collection_id;
        """
    )
    op.drop_column("collection_items", "updated_at")
    op.drop_column("collection_items", "created_at")
    op.drop_column("collection_items", "collection_id")
    op.execute(
        """
        DELETE FROM collection_items WHERE school_id IS NULL;
        """
    )
    op.alter_column(
        "collection_items", "school_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.drop_index(op.f("ix_collections_name"), table_name="collections")
    op.drop_index(op.f("ix_collections_id"), table_name="collections")
    op.drop_table("collections")
    # ### end Alembic commands ###
