"""Remove search triggers

Revision ID: 362449eb9849
Revises: 01bf3f33a0c8
Create Date: 2024-05-12 10:49:20.909122

"""

from alembic_utils.pg_extension import PGExtension
from alembic_utils.pg_trigger import PGTrigger

from alembic import op

# revision identifiers, used by Alembic.
revision = "362449eb9849"
down_revision = "01bf3f33a0c8"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    public_authors_update_search_v1_from_authors_trigger = PGTrigger(
        schema="public",
        signature="update_search_v1_from_authors_trigger",
        on_entity="public.authors",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE OR UPDATE ON public.authors FOR EACH STATEMENT EXECUTE FUNCTION refresh_search_view_v1_function()",
    )
    op.drop_entity(public_authors_update_search_v1_from_authors_trigger)

    public_works_update_search_v1_from_works_trigger = PGTrigger(
        schema="public",
        signature="update_search_v1_from_works_trigger",
        on_entity="public.works",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE OR UPDATE OF title ON public.works FOR EACH STATEMENT EXECUTE FUNCTION refresh_search_view_v1_function()",
    )
    op.drop_entity(public_works_update_search_v1_from_works_trigger)

    public_series_update_search_v1_from_series_trigger = PGTrigger(
        schema="public",
        signature="update_search_v1_from_series_trigger",
        on_entity="public.series",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE OR UPDATE ON public.series FOR EACH STATEMENT EXECUTE FUNCTION refresh_search_view_v1_function()",
    )
    op.drop_entity(public_series_update_search_v1_from_series_trigger)

    public_collection_items_update_work_collection_frequency_from_collection_item_trigger = PGTrigger(
        schema="public",
        signature="update_work_collection_frequency_from_collection_item_trigger",
        on_entity="public.collection_items",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE OR UPDATE ON public.collection_items FOR EACH STATEMENT EXECUTE FUNCTION refresh_work_collection_frequency_view_function()",
    )
    op.drop_entity(
        public_collection_items_update_work_collection_frequency_from_collection_item_trigger
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    public_collection_items_update_work_collection_frequency_from_collection_item_trigger = PGTrigger(
        schema="public",
        signature="update_work_collection_frequency_from_collection_item_trigger",
        on_entity="public.collection_items",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE OR UPDATE ON public.collection_items FOR EACH STATEMENT EXECUTE FUNCTION refresh_work_collection_frequency_view_function()",
    )
    op.create_entity(
        public_collection_items_update_work_collection_frequency_from_collection_item_trigger
    )

    public_series_update_search_v1_from_series_trigger = PGTrigger(
        schema="public",
        signature="update_search_v1_from_series_trigger",
        on_entity="public.series",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE OR UPDATE ON public.series FOR EACH STATEMENT EXECUTE FUNCTION refresh_search_view_v1_function()",
    )
    op.create_entity(public_series_update_search_v1_from_series_trigger)

    public_works_update_search_v1_from_works_trigger = PGTrigger(
        schema="public",
        signature="update_search_v1_from_works_trigger",
        on_entity="public.works",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE OR UPDATE OF title ON public.works FOR EACH STATEMENT EXECUTE FUNCTION refresh_search_view_v1_function()",
    )
    op.create_entity(public_works_update_search_v1_from_works_trigger)

    public_authors_update_search_v1_from_authors_trigger = PGTrigger(
        schema="public",
        signature="update_search_v1_from_authors_trigger",
        on_entity="public.authors",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE OR UPDATE ON public.authors FOR EACH STATEMENT EXECUTE FUNCTION refresh_search_view_v1_function()",
    )
    op.create_entity(public_authors_update_search_v1_from_authors_trigger)

    # ### end Alembic commands ###
