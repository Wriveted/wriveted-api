"""remove db_jobs_nc_evolutions

Revision ID: 9a25e9984332
Revises: dc4f1d12fa07
Create Date: 2022-07-14 12:14:11.857497

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.engine.reflection import Inspector

from alembic import op

# revision identifiers, used by Alembic.
revision = "9a25e9984332"
down_revision = "dc4f1d12fa07"
branch_labels = None
depends_on = None


conn = op.get_bind()
inspector = Inspector.from_engine(conn)
tables = inspector.get_table_names()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_db_jobs_school_id", table_name="db_jobs")
    op.drop_table("db_jobs")
    op.execute("DROP TYPE jobtype")
    op.execute("DROP TYPE jobstatus")

    if "nc_evolutions" in tables:
        op.drop_table("nc_evolutions")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "db_jobs",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("total_items", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("successes", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("errors", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "summary",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_timestamp",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "started_timestamp",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "ended_timestamp",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "type",
            postgresql.ENUM("POPULATE", "UPDATE", name="jobtype"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "status",
            postgresql.ENUM("PENDING", "RUNNING", "COMPLETE", name="jobstatus"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("school_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["school_id"], ["schools.id"], name="fk_db_jobs_schools"
        ),
        sa.PrimaryKeyConstraint("id", name="db_jobs_pkey"),
    )
    op.create_index("ix_db_jobs_school_id", "db_jobs", ["school_id"], unique=False)

    if "nc_evolutions" not in tables:
        op.create_table(
            "nc_evolutions",
            sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
            sa.Column(
                "title", sa.VARCHAR(length=255), autoincrement=False, nullable=False
            ),
            sa.Column(
                "titleDown", sa.VARCHAR(length=255), autoincrement=False, nullable=True
            ),
            sa.Column(
                "description",
                sa.VARCHAR(length=255),
                autoincrement=False,
                nullable=True,
            ),
            sa.Column("batch", sa.INTEGER(), autoincrement=False, nullable=True),
            sa.Column(
                "checksum", sa.VARCHAR(length=255), autoincrement=False, nullable=True
            ),
            sa.Column("status", sa.INTEGER(), autoincrement=False, nullable=True),
            sa.Column(
                "created",
                postgresql.TIMESTAMP(timezone=True),
                autoincrement=False,
                nullable=True,
            ),
            sa.Column(
                "created_at",
                postgresql.TIMESTAMP(timezone=True),
                autoincrement=False,
                nullable=True,
            ),
            sa.Column(
                "updated_at",
                postgresql.TIMESTAMP(timezone=True),
                autoincrement=False,
                nullable=True,
            ),
            sa.PrimaryKeyConstraint("id", name="nc_evolutions_pkey"),
        )
    # ### end Alembic commands ###
