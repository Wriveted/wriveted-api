"""introduce user inheritance tables

Revision ID: 52a7389ccfa6
Revises: 2b2edef753de
Create Date: 2022-05-25 15:29:43.336079

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from app.models.school_admin import SchoolAdmin
from app.models.wriveted_admin import WrivetedAdmin

# revision identifiers, used by Alembic.
revision = "52a7389ccfa6"
down_revision = "2b2edef753de"
branch_labels = None
depends_on = None


def upgrade():
    # school admins (teachers, librarians)
    op.create_table(
        "school_admins",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("school_id", sa.Integer(), nullable=True),
        sa.Column("school_admin_info", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["users.id"], name="fk_schooladmin_inherits_user"
        ),
        sa.ForeignKeyConstraint(
            ["school_id"], ["schools.id"], name="fk_schooladmin_school"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_school_admins_school_id"), "school_admins", ["school_id"], unique=False
    )

    # students
    op.create_table(
        "students",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("first_name", sa.String(length=30), nullable=True),
        sa.Column("last_name_initial", sa.String(length=1), nullable=True),
        sa.Column("school_id", sa.Integer(), nullable=True),
        sa.Column("student_info", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(["id"], ["users.id"], name="fk_student_inherits_user"),
        sa.ForeignKeyConstraint(["school_id"], ["schools.id"], name="fk_admin_school"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_students_school_id"), "students", ["school_id"], unique=False
    )

    # actual admins/wriveted staff
    op.create_table(
        "wriveted_admins",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("wriveted_admin_info", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.drop_index("ix_users_school_id_as_student", table_name="users")
    op.drop_constraint("fk_student_school", "users", type_="foreignkey")
    op.drop_column("users", "school_id_as_student")
    op.drop_constraint("schools_admin_id_fkey", "schools", type_="foreignkey")

    # extract existing school admins and insert into new table before updating the schools->admin_id FK
    conn = op.get_bind()
    res = conn.execute(
        "select id, school_id_as_admin from users where type = 'LIBRARY'"
    )
    results = res.fetchall()
    existing_admins = [
        {"id": r[0], "school_id": r[1], "school_admin_info": {}} for r in results
    ]
    op.bulk_insert(SchoolAdmin.__table__, existing_admins)
    op.create_foreign_key(
        "schools_admin_id_fkey", "schools", "school_admins", ["admin_id"], ["id"]
    )

    # do the same for admins (dw bout FK this time)
    conn = op.get_bind()
    res = conn.execute("select id from users where type = 'WRIVETED'")
    results = res.fetchall()
    existing_admins = [{"id": r[0], "wriveted_admin_info": {}} for r in results]
    op.bulk_insert(WrivetedAdmin.__table__, existing_admins)

    # remove relationships from base user
    op.drop_index("ix_users_school_id_as_admin", table_name="users")
    op.drop_constraint("fk_admin_school", "users", type_="foreignkey")
    op.drop_column("users", "school_id_as_admin")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.add_column(
        "users",
        sa.Column(
            "school_id_as_admin", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.create_foreign_key(
        "fk_admin_school", "users", "schools", ["school_id_as_admin"], ["id"]
    )
    op.create_index(
        "ix_users_school_id_as_admin", "users", ["school_id_as_admin"], unique=False
    )

    op.drop_constraint("schools_admin_id_fkey", "schools", type_="foreignkey")

    op.execute(
        """
        update users
        set school_id_as_admin = school_admins_to_revert.school_id
        from 
            (select id, school_id from school_admins) as school_admins_to_revert
        where users.id = school_admins_to_revert.id;
        """
    )
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    session.query(SchoolAdmin).delete()

    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    session.query(WrivetedAdmin).delete()

    op.create_foreign_key(
        "schools_admin_id_fkey", "schools", "users", ["admin_id"], ["id"]
    )
    op.add_column(
        "users",
        sa.Column(
            "school_id_as_student", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.create_foreign_key(
        "fk_student_school", "users", "schools", ["school_id_as_student"], ["id"]
    )
    op.create_index(
        "ix_users_school_id_as_student", "users", ["school_id_as_student"], unique=False
    )
    op.drop_table("wriveted_admins")
    op.drop_index(op.f("ix_students_school_id"), table_name="students")
    op.drop_table("students")
    op.drop_index(op.f("ix_school_admins_school_id"), table_name="school_admins")
    op.drop_table("school_admins")
    # ### end Alembic commands ###
